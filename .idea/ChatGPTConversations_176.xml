<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.sapient.pscopilot.state.conversations.ConversationsState">
    <option name="conversationsContainer" value="{&quot;conversationsMapping&quot;:{&quot;pschat.chat.completion&quot;:[{&quot;id&quot;:&quot;c4cfe654-b69f-4bc6-9d8d-784bcdd4b29c&quot;,&quot;messages&quot;:[{&quot;prompt&quot;:&quot;&quot;,&quot;id&quot;:&quot;1a7a4c9e-fa54-4029-a957-f17d42ca070d&quot;,&quot;response&quot;:&quot;Successfully signed in to Publicis Sapient as Debojyoti Chatterjee.&quot;,&quot;userMessage&quot;:null,&quot;serpResults&quot;:null},{&quot;prompt&quot;:&quot;Find problems in the code \n```java\npackage org.capitalone.dashboard.service;\n\n@Service\npublic class GithubService {\n\n    private final RestTemplate restTemplate;\n    private final String githubApiUrl = \&quot;https://api.github.com\&quot;;\n    private final String token = \&quot;YOUR_GITHUB_TOKEN\&quot;; // Store this securely (e.g., env variables)\n\n    public GithubService(RestTemplateBuilder restTemplateBuilder) {\n        this.restTemplate = restTemplateBuilder.build();\n    }\n\n    public List&lt;PullRequest&gt; getOldPullRequests(String repo) {\n        String url = String.format(\&quot;%s/repos/%s/pulls?state=open\&quot;, githubApiUrl, repo);\n        HttpHeaders headers = new HttpHeaders();\n        headers.set(\&quot;Authorization\&quot;, \&quot;Bearer \&quot; + token);\n        HttpEntity&lt;String&gt; entity = new HttpEntity&lt;&gt;(headers);\n\n        ResponseEntity&lt;PullRequest[]&gt; response = restTemplate.exchange(url, HttpMethod.GET, entity, PullRequest[].class);\n        List&lt;PullRequest&gt; pullRequests = Arrays.asList(response.getBody());\n\n        // Filter old PRs (e.g., more than 14 days old)\n        return pullRequests.stream()\n                .filter(pr -&gt; pr.getCreatedAt().isBefore(LocalDate.now().minusDays(14)))\n                .collect(Collectors.toList());\n    }\n\n    // Add methods to fetch merged branches, etc.\n}\n\n```&quot;,&quot;id&quot;:&quot;256cbeb2-3490-4de0-acd9-33fc66a18b64&quot;,&quot;response&quot;:&quot;The provided Java code snippet for the `GithubService` class is designed to interact with the GitHub API to fetch pull requests that are more than 14 days old. Here are some issues and improvements that can be made to the code:\n\n1. **Missing Imports and Annotations:**\n   The code snippet lacks necessary imports and annotations which are essential for the code to compile and run correctly in a Spring context.\n\n2. **Security Concern with Token Handling:**\n   The token is hardcoded in the source code, which is a security risk. It's better to load sensitive information from environment variables or secure vaults.\n\n3. **Error Handling:**\n   The code does not handle potential exceptions that could be thrown during the HTTP request to the GitHub API, such as `RestClientException`.\n\n4. **Date Handling:**\n   The code uses `LocalDate.now()` which can lead to different results depending on the system's default timezone. It's better to specify a timezone explicitly.\n\n5. **General Code Enhancements:**\n   Adding more comments for clarity, especially explaining the purpose of each method and major steps within methods, can improve maintainability.\n\nHere's the revised version of the code with these issues addressed:\n\n```java\npackage org.capitalone.dashboard.service;\n\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.client.RestTemplate;\nimport org.springframework.web.client.RestTemplateBuilder;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpEntity;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.beans.factory.annotation.Value;\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.stream.Collectors;\n\n@Service\npublic class GithubService {\n\n    private final RestTemplate restTemplate;\n    private final String githubApiUrl = \&quot;https://api.github.com\&quot;;\n\n    @Value(\&quot;${github.token}\&quot;)\n    private String token; // Token is now loaded from application properties or environment variables\n\n    public GithubService(RestTemplateBuilder restTemplateBuilder) {\n        this.restTemplate = restTemplateBuilder.build();\n    }\n\n    public List&lt;PullRequest&gt; getOldPullRequests(String repo) {\n        String url = String.format(\&quot;%s/repos/%s/pulls?state=open\&quot;, githubApiUrl, repo);\n        HttpHeaders headers = new HttpHeaders();\n        headers.set(\&quot;Authorization\&quot;, \&quot;Bearer \&quot; + token);\n        HttpEntity&lt;String&gt; entity = new HttpEntity&lt;&gt;(headers);\n\n        ResponseEntity&lt;PullRequest[]&gt; response;\n        try {\n            response = restTemplate.exchange(url, HttpMethod.GET, entity, PullRequest[].class);\n        } catch (Exception e) {\n            // Log and handle the exception appropriately\n            throw new RuntimeException(\&quot;Failed to fetch pull requests\&quot;, e);\n        }\n\n        List&lt;PullRequest&gt; pullRequests = Arrays.asList(response.getBody());\n\n        // Filter old PRs (e.g., more than 14 days old)\n        return pullRequests.stream()\n                .filter(pr -&gt; pr.getCreatedAt().isBefore(LocalDate.now(ZoneId.of(\&quot;UTC\&quot;)).minusDays(14)))\n                .collect(Collectors.toList());\n    }\n\n    // Additional methods to fetch merged branches, etc., can be added here\n}\n```\n\n### Usage Example:\nAssuming you have a `PullRequest` class defined and your application properties are correctly set up to inject the `github.token`, you can use this service in your Spring application like this:\n\n```java\n@Autowired\nprivate GithubService githubService;\n\npublic void displayOldPullRequests() {\n    List&lt;PullRequest&gt; oldPRs = githubService.getOldPullRequests(\&quot;your-repo-name\&quot;);\n    oldPRs.forEach(pr -&gt; System.out.println(pr.toString()));\n}\n```\n\nThis example assumes that the `PullRequest` class has a suitable `toString` method for displaying pull request details.&quot;,&quot;userMessage&quot;:null,&quot;serpResults&quot;:null},{&quot;prompt&quot;:&quot;Find problems in the code \n```java\npackage org.capitalone.dashboard.service;\n\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.client.RestTemplate;\nimport org.springframework.web.client.RestTemplateBuilder;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpEntity;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.beans.factory.annotation.Value;\n\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.stream.Collectors;\n\n@Service\npublic class GithubService {\n\n    private final RestTemplate restTemplate;\n    private final String githubApiUrl = \&quot;https://api.github.com\&quot;;\n\n    @Value(\&quot;${github.token}\&quot;)\n    private String token; // Token is now loaded from application properties or environment variables\n\n    public GithubService(RestTemplateBuilder restTemplateBuilder) {\n        this.restTemplate = restTemplateBuilder.build();\n    }\n\n    public List&lt;PullRequest&gt; getOldPullRequests(String repo) {\n        String url = String.format(\&quot;%s/repos/%s/pulls?state=open\&quot;, githubApiUrl, repo);\n        HttpHeaders headers = new HttpHeaders();\n        headers.set(\&quot;Authorization\&quot;, \&quot;Bearer \&quot; + token);\n        HttpEntity&lt;String&gt; entity = new HttpEntity&lt;&gt;(headers);\n\n        ResponseEntity&lt;PullRequest[]&gt; response;\n        try {\n            response = restTemplate.exchange(url, HttpMethod.GET, entity, PullRequest[].class);\n        } catch (Exception e) {\n            // Log and handle the exception appropriately\n            throw new RuntimeException(\&quot;Failed to fetch pull requests\&quot;, e);\n        }\n\n        List&lt;PullRequest&gt; pullRequests = Arrays.asList(response.getBody());\n\n        // Filter old PRs (e.g., more than 14 days old)\n        return pullRequests.stream()\n                .filter(pr -&gt; pr.getCreatedAt().isBefore(LocalDate.now(ZoneId.of(\&quot;UTC\&quot;)).minusDays(14)))\n                .collect(Collectors.toList());\n    }\n\n    // Additional methods to fetch merged branches, etc., can be added here\n}\n\n```&quot;,&quot;id&quot;:&quot;b64898fa-5f53-41a5-94b0-80d84710b573&quot;,&quot;response&quot;:&quot;The provided Java code for the `GithubService` class in a Spring application is well-structured and mostly adheres to best practices. However, there are still a few improvements and considerations that could enhance its functionality, maintainability, and robustness:\n\n1. **Exception Handling and Logging:**\n   While the code does catch exceptions that might be thrown during the HTTP request, it only throws a runtime exception without any specific error handling or logging. It would be beneficial to add logging before throwing the exception to aid in debugging and maintaining logs for production issues.\n\n2. **Handling of HTTP Response Status:**\n   The code assumes that the HTTP response always contains a valid body. However, in real-world scenarios, it's possible to receive various HTTP status codes that indicate different outcomes (e.g., 404 Not Found, 401 Unauthorized). It's important to check the response status before processing the body.\n\n3. **Use of Java Time API:**\n   The code correctly uses `ZoneId.of(\&quot;UTC\&quot;)` to standardize the time zone for date operations. However, it's a good practice to make the time zone configurable or document that UTC is being used explicitly, as this might not be immediately apparent to other developers or might need to be changed based on user locale.\n\n4. **Dependency Injection for `githubApiUrl`:**\n   Currently, `githubApiUrl` is hardcoded in the service class. For better flexibility and to facilitate different environments (e.g., testing against a mock server), consider injecting this value from the application properties or environment configuration.\n\n5. **Enhanced Filtering Logic:**\n   The current filtering logic for pull requests older than 14 days is hardcoded. Consider making the number of days configurable through application properties to allow easy adjustments without code changes.\n\n6. **Unit Testing:**\n   There is no mention of unit tests. Ensure that unit tests are written to cover various scenarios including successful fetches, handling of different HTTP status codes, and proper functioning of the date filtering logic.\n\nHere is the revised version of the code with these suggestions:\n\n```java\npackage org.capitalone.dashboard.service;\n\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.client.RestTemplate;\nimport org.springframework.web.client.RestTemplateBuilder;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpEntity;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.stream.Collectors;\n\n@Service\npublic class GithubService {\n\n    private static final Logger logger = LoggerFactory.getLogger(GithubService.class);\n\n    private final RestTemplate restTemplate;\n    \n    @Value(\&quot;${github.api.url:https://api.github.com}\&quot;)\n    private String githubApiUrl;\n\n    @Value(\&quot;${github.token}\&quot;)\n    private String token;\n\n    @Value(\&quot;${pr.old.threshold.days:14}\&quot;)\n    private int thresholdDays;\n\n    public GithubService(RestTemplateBuilder restTemplateBuilder) {\n        this.restTemplate = restTemplateBuilder.build();\n    }\n\n    public List&lt;PullRequest&gt; getOldPullRequests(String repo) {\n        String url = String.format(\&quot;%s/repos/%s/pulls?state=open\&quot;, githubApiUrl, repo);\n        HttpHeaders headers = new HttpHeaders();\n        headers.set(\&quot;Authorization\&quot;, \&quot;Bearer \&quot; + token);\n        HttpEntity&lt;String&gt; entity = new HttpEntity&lt;&gt;(headers);\n\n        ResponseEntity&lt;PullRequest[]&gt; response;\n        try {\n            response = restTemplate.exchange(url, HttpMethod.GET, entity, PullRequest[].class);\n            if (!response.getStatusCode().is2xxSuccessful()) {\n                logger.error(\&quot;Failed to fetch pull requests, HTTP Status: {}\&quot;, response.getStatusCode());\n                return Collections.emptyList();\n            }\n        } catch (Exception e) {\n            logger.error(\&quot;Failed to fetch pull requests\&quot;, e);\n            throw new RuntimeException(\&quot;Failed to fetch pull requests\&quot;, e);\n        }\n\n        List&quot;,&quot;userMessage&quot;:null,&quot;serpResults&quot;:null}],&quot;clientCode&quot;:&quot;pschat.chat.completion&quot;,&quot;model&quot;:&quot;PSChat&quot;,&quot;provider&quot;:&quot;LionChatRag&quot;,&quot;providerModel&quot;:&quot;gpt-4-turbo&quot;,&quot;createdOn&quot;:[2024,10,7,15,35,56,427953000],&quot;updatedOn&quot;:[2024,10,7,15,56,1,600560000],&quot;discardTokenLimit&quot;:false,&quot;chatId&quot;:&quot;beac3524-9844-4087-932d-27dcace4bac7&quot;,&quot;chatTabName&quot;:&quot;Default&quot;}]}}" />
    <option name="currentConversation" value="{&quot;id&quot;:&quot;c4cfe654-b69f-4bc6-9d8d-784bcdd4b29c&quot;,&quot;messages&quot;:[{&quot;prompt&quot;:&quot;&quot;,&quot;id&quot;:&quot;1a7a4c9e-fa54-4029-a957-f17d42ca070d&quot;,&quot;response&quot;:&quot;Successfully signed in to Publicis Sapient as Debojyoti Chatterjee.&quot;,&quot;userMessage&quot;:null,&quot;serpResults&quot;:null},{&quot;prompt&quot;:&quot;Find problems in the code \n```java\npackage org.capitalone.dashboard.service;\n\n@Service\npublic class GithubService {\n\n    private final RestTemplate restTemplate;\n    private final String githubApiUrl = \&quot;https://api.github.com\&quot;;\n    private final String token = \&quot;YOUR_GITHUB_TOKEN\&quot;; // Store this securely (e.g., env variables)\n\n    public GithubService(RestTemplateBuilder restTemplateBuilder) {\n        this.restTemplate = restTemplateBuilder.build();\n    }\n\n    public List&lt;PullRequest&gt; getOldPullRequests(String repo) {\n        String url = String.format(\&quot;%s/repos/%s/pulls?state=open\&quot;, githubApiUrl, repo);\n        HttpHeaders headers = new HttpHeaders();\n        headers.set(\&quot;Authorization\&quot;, \&quot;Bearer \&quot; + token);\n        HttpEntity&lt;String&gt; entity = new HttpEntity&lt;&gt;(headers);\n\n        ResponseEntity&lt;PullRequest[]&gt; response = restTemplate.exchange(url, HttpMethod.GET, entity, PullRequest[].class);\n        List&lt;PullRequest&gt; pullRequests = Arrays.asList(response.getBody());\n\n        // Filter old PRs (e.g., more than 14 days old)\n        return pullRequests.stream()\n                .filter(pr -&gt; pr.getCreatedAt().isBefore(LocalDate.now().minusDays(14)))\n                .collect(Collectors.toList());\n    }\n\n    // Add methods to fetch merged branches, etc.\n}\n\n```&quot;,&quot;id&quot;:&quot;256cbeb2-3490-4de0-acd9-33fc66a18b64&quot;,&quot;response&quot;:&quot;The provided Java code snippet for the `GithubService` class is designed to interact with the GitHub API to fetch pull requests that are more than 14 days old. Here are some issues and improvements that can be made to the code:\n\n1. **Missing Imports and Annotations:**\n   The code snippet lacks necessary imports and annotations which are essential for the code to compile and run correctly in a Spring context.\n\n2. **Security Concern with Token Handling:**\n   The token is hardcoded in the source code, which is a security risk. It's better to load sensitive information from environment variables or secure vaults.\n\n3. **Error Handling:**\n   The code does not handle potential exceptions that could be thrown during the HTTP request to the GitHub API, such as `RestClientException`.\n\n4. **Date Handling:**\n   The code uses `LocalDate.now()` which can lead to different results depending on the system's default timezone. It's better to specify a timezone explicitly.\n\n5. **General Code Enhancements:**\n   Adding more comments for clarity, especially explaining the purpose of each method and major steps within methods, can improve maintainability.\n\nHere's the revised version of the code with these issues addressed:\n\n```java\npackage org.capitalone.dashboard.service;\n\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.client.RestTemplate;\nimport org.springframework.web.client.RestTemplateBuilder;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpEntity;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.beans.factory.annotation.Value;\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.stream.Collectors;\n\n@Service\npublic class GithubService {\n\n    private final RestTemplate restTemplate;\n    private final String githubApiUrl = \&quot;https://api.github.com\&quot;;\n\n    @Value(\&quot;${github.token}\&quot;)\n    private String token; // Token is now loaded from application properties or environment variables\n\n    public GithubService(RestTemplateBuilder restTemplateBuilder) {\n        this.restTemplate = restTemplateBuilder.build();\n    }\n\n    public List&lt;PullRequest&gt; getOldPullRequests(String repo) {\n        String url = String.format(\&quot;%s/repos/%s/pulls?state=open\&quot;, githubApiUrl, repo);\n        HttpHeaders headers = new HttpHeaders();\n        headers.set(\&quot;Authorization\&quot;, \&quot;Bearer \&quot; + token);\n        HttpEntity&lt;String&gt; entity = new HttpEntity&lt;&gt;(headers);\n\n        ResponseEntity&lt;PullRequest[]&gt; response;\n        try {\n            response = restTemplate.exchange(url, HttpMethod.GET, entity, PullRequest[].class);\n        } catch (Exception e) {\n            // Log and handle the exception appropriately\n            throw new RuntimeException(\&quot;Failed to fetch pull requests\&quot;, e);\n        }\n\n        List&lt;PullRequest&gt; pullRequests = Arrays.asList(response.getBody());\n\n        // Filter old PRs (e.g., more than 14 days old)\n        return pullRequests.stream()\n                .filter(pr -&gt; pr.getCreatedAt().isBefore(LocalDate.now(ZoneId.of(\&quot;UTC\&quot;)).minusDays(14)))\n                .collect(Collectors.toList());\n    }\n\n    // Additional methods to fetch merged branches, etc., can be added here\n}\n```\n\n### Usage Example:\nAssuming you have a `PullRequest` class defined and your application properties are correctly set up to inject the `github.token`, you can use this service in your Spring application like this:\n\n```java\n@Autowired\nprivate GithubService githubService;\n\npublic void displayOldPullRequests() {\n    List&lt;PullRequest&gt; oldPRs = githubService.getOldPullRequests(\&quot;your-repo-name\&quot;);\n    oldPRs.forEach(pr -&gt; System.out.println(pr.toString()));\n}\n```\n\nThis example assumes that the `PullRequest` class has a suitable `toString` method for displaying pull request details.&quot;,&quot;userMessage&quot;:null,&quot;serpResults&quot;:null},{&quot;prompt&quot;:&quot;Find problems in the code \n```java\npackage org.capitalone.dashboard.service;\n\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.client.RestTemplate;\nimport org.springframework.web.client.RestTemplateBuilder;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpEntity;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.beans.factory.annotation.Value;\n\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.stream.Collectors;\n\n@Service\npublic class GithubService {\n\n    private final RestTemplate restTemplate;\n    private final String githubApiUrl = \&quot;https://api.github.com\&quot;;\n\n    @Value(\&quot;${github.token}\&quot;)\n    private String token; // Token is now loaded from application properties or environment variables\n\n    public GithubService(RestTemplateBuilder restTemplateBuilder) {\n        this.restTemplate = restTemplateBuilder.build();\n    }\n\n    public List&lt;PullRequest&gt; getOldPullRequests(String repo) {\n        String url = String.format(\&quot;%s/repos/%s/pulls?state=open\&quot;, githubApiUrl, repo);\n        HttpHeaders headers = new HttpHeaders();\n        headers.set(\&quot;Authorization\&quot;, \&quot;Bearer \&quot; + token);\n        HttpEntity&lt;String&gt; entity = new HttpEntity&lt;&gt;(headers);\n\n        ResponseEntity&lt;PullRequest[]&gt; response;\n        try {\n            response = restTemplate.exchange(url, HttpMethod.GET, entity, PullRequest[].class);\n        } catch (Exception e) {\n            // Log and handle the exception appropriately\n            throw new RuntimeException(\&quot;Failed to fetch pull requests\&quot;, e);\n        }\n\n        List&lt;PullRequest&gt; pullRequests = Arrays.asList(response.getBody());\n\n        // Filter old PRs (e.g., more than 14 days old)\n        return pullRequests.stream()\n                .filter(pr -&gt; pr.getCreatedAt().isBefore(LocalDate.now(ZoneId.of(\&quot;UTC\&quot;)).minusDays(14)))\n                .collect(Collectors.toList());\n    }\n\n    // Additional methods to fetch merged branches, etc., can be added here\n}\n\n```&quot;,&quot;id&quot;:&quot;b64898fa-5f53-41a5-94b0-80d84710b573&quot;,&quot;response&quot;:&quot;The provided Java code for the `GithubService` class in a Spring application is well-structured and mostly adheres to best practices. However, there are still a few improvements and considerations that could enhance its functionality, maintainability, and robustness:\n\n1. **Exception Handling and Logging:**\n   While the code does catch exceptions that might be thrown during the HTTP request, it only throws a runtime exception without any specific error handling or logging. It would be beneficial to add logging before throwing the exception to aid in debugging and maintaining logs for production issues.\n\n2. **Handling of HTTP Response Status:**\n   The code assumes that the HTTP response always contains a valid body. However, in real-world scenarios, it's possible to receive various HTTP status codes that indicate different outcomes (e.g., 404 Not Found, 401 Unauthorized). It's important to check the response status before processing the body.\n\n3. **Use of Java Time API:**\n   The code correctly uses `ZoneId.of(\&quot;UTC\&quot;)` to standardize the time zone for date operations. However, it's a good practice to make the time zone configurable or document that UTC is being used explicitly, as this might not be immediately apparent to other developers or might need to be changed based on user locale.\n\n4. **Dependency Injection for `githubApiUrl`:**\n   Currently, `githubApiUrl` is hardcoded in the service class. For better flexibility and to facilitate different environments (e.g., testing against a mock server), consider injecting this value from the application properties or environment configuration.\n\n5. **Enhanced Filtering Logic:**\n   The current filtering logic for pull requests older than 14 days is hardcoded. Consider making the number of days configurable through application properties to allow easy adjustments without code changes.\n\n6. **Unit Testing:**\n   There is no mention of unit tests. Ensure that unit tests are written to cover various scenarios including successful fetches, handling of different HTTP status codes, and proper functioning of the date filtering logic.\n\nHere is the revised version of the code with these suggestions:\n\n```java\npackage org.capitalone.dashboard.service;\n\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.client.RestTemplate;\nimport org.springframework.web.client.RestTemplateBuilder;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpEntity;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.stream.Collectors;\n\n@Service\npublic class GithubService {\n\n    private static final Logger logger = LoggerFactory.getLogger(GithubService.class);\n\n    private final RestTemplate restTemplate;\n    \n    @Value(\&quot;${github.api.url:https://api.github.com}\&quot;)\n    private String githubApiUrl;\n\n    @Value(\&quot;${github.token}\&quot;)\n    private String token;\n\n    @Value(\&quot;${pr.old.threshold.days:14}\&quot;)\n    private int thresholdDays;\n\n    public GithubService(RestTemplateBuilder restTemplateBuilder) {\n        this.restTemplate = restTemplateBuilder.build();\n    }\n\n    public List&lt;PullRequest&gt; getOldPullRequests(String repo) {\n        String url = String.format(\&quot;%s/repos/%s/pulls?state=open\&quot;, githubApiUrl, repo);\n        HttpHeaders headers = new HttpHeaders();\n        headers.set(\&quot;Authorization\&quot;, \&quot;Bearer \&quot; + token);\n        HttpEntity&lt;String&gt; entity = new HttpEntity&lt;&gt;(headers);\n\n        ResponseEntity&lt;PullRequest[]&gt; response;\n        try {\n            response = restTemplate.exchange(url, HttpMethod.GET, entity, PullRequest[].class);\n            if (!response.getStatusCode().is2xxSuccessful()) {\n                logger.error(\&quot;Failed to fetch pull requests, HTTP Status: {}\&quot;, response.getStatusCode());\n                return Collections.emptyList();\n            }\n        } catch (Exception e) {\n            logger.error(\&quot;Failed to fetch pull requests\&quot;, e);\n            throw new RuntimeException(\&quot;Failed to fetch pull requests\&quot;, e);\n        }\n\n        List&quot;,&quot;userMessage&quot;:null,&quot;serpResults&quot;:null}],&quot;clientCode&quot;:&quot;pschat.chat.completion&quot;,&quot;model&quot;:&quot;PSChat&quot;,&quot;provider&quot;:&quot;LionChatRag&quot;,&quot;providerModel&quot;:&quot;gpt-4-turbo&quot;,&quot;createdOn&quot;:[2024,10,7,15,35,56,427953000],&quot;updatedOn&quot;:[2024,10,7,15,56,1,600560000],&quot;discardTokenLimit&quot;:false,&quot;chatId&quot;:&quot;beac3524-9844-4087-932d-27dcace4bac7&quot;,&quot;chatTabName&quot;:&quot;Default&quot;}" />
  </component>
</project>